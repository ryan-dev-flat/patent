"""updated models

Revision ID: 565dd2cdc3be
Revises: 
Create Date: 2024-10-14 17:04:34.031461

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.engine.reflection import Inspector

# revision identifiers, used by Alembic.
revision = '565dd2cdc3be'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # Bind to the connection and create an inspector instance
    conn = op.get_bind()
    inspector = Inspector.from_engine(conn)

    # Create 'user' table if it does not exist
    if 'user' not in inspector.get_table_names():
        op.create_table(
            'user',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('username', sa.String(length=64), nullable=False, unique=True),
            sa.Column('password', sa.String(length=128), nullable=False),
        )

    # Create 'patent' table if it does not exist
    if 'patent' not in inspector.get_table_names():
        op.create_table(
            'patent',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('title', sa.String(length=128), nullable=False),
            sa.Column('description', sa.Text(), nullable=False),
            sa.Column('patentability_score', sa.Float(), nullable=True),
            sa.Column('status', sa.String(length=64), nullable=False),
            sa.Column('created_date', sa.DateTime(), nullable=True),
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['user_id'], ['user.id']),
        )

    # Repeat for each remaining table
    if 'novelty' not in inspector.get_table_names():
        op.create_table(
            'novelty',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('new_invention', sa.Boolean(), nullable=True),
            sa.Column('not_publicly_disclosed', sa.Boolean(), nullable=True),
            sa.Column('not_described_in_printed_publication', sa.Boolean(), nullable=True),
            sa.Column('not_in_public_use', sa.Boolean(), nullable=True),
            sa.Column('not_on_sale', sa.Boolean(), nullable=True),
            sa.Column('novelty_score', sa.Float(), nullable=True),
            sa.Column('patent_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['patent_id'], ['patent.id']),
        )

    # Add similar checks for 'obviousness', 'prior_art', 'user_patent', and 'utility' tables
    if 'obviousness' not in inspector.get_table_names():
        op.create_table(
            'obviousness',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('scope_of_prior_art', sa.String(), nullable=True),
            sa.Column('differences_from_prior_art', sa.String(), nullable=True),
            sa.Column('level_of_ordinary_skill', sa.String(), nullable=True),
            sa.Column('secondary_considerations', sa.String(), nullable=True),
            sa.Column('obviousness_score', sa.Float(), nullable=True),
            sa.Column('patent_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['patent_id'], ['patent.id']),
        )

    if 'prior_art' not in inspector.get_table_names():
        op.create_table(
            'prior_art',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('patent_number', sa.String(), nullable=False),
            sa.Column('title', sa.String(), nullable=False),
            sa.Column('abstract', sa.Text(), nullable=False),
            sa.Column('url', sa.String(), nullable=False),
            sa.Column('patent_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['patent_id'], ['patent.id']),
        )

    if 'user_patent' not in inspector.get_table_names():
        op.create_table(
            'user_patent',
            sa.Column('user_id', sa.Integer(), nullable=False),
            sa.Column('patent_id', sa.Integer(), nullable=False),
            sa.ForeignKeyConstraint(['patent_id'], ['patent.id']),
            sa.ForeignKeyConstraint(['user_id'], ['user.id']),
            sa.PrimaryKeyConstraint('user_id', 'patent_id')
        )

    if 'utility' not in inspector.get_table_names():
        op.create_table(
            'utility',
            sa.Column('id', sa.Integer(), primary_key=True),
            sa.Column('useful', sa.Boolean(), nullable=True),
            sa.Column('operable', sa.Boolean(), nullable=True),
            sa.Column('practical', sa.Boolean(), nullable=True),
            sa.Column('utility_score', sa.Float(), nullable=True),
            sa.Column('patent_id', sa.Integer(), nullable=True),
            sa.ForeignKeyConstraint(['patent_id'], ['patent.id']),
        )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('utility')
    op.drop_table('user_patent')
    op.drop_table('prior_art')
    op.drop_table('obviousness')
    op.drop_table('novelty')
    op.drop_table('patent')
    op.drop_table('user')
    # ### end Alembic commands ###
