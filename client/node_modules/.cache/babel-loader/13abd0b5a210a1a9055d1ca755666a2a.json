{"ast":null,"code":"// src/utils/useAxios.js\nimport { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\nimport axios from 'axios';\n\n// Create the axios instance\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\nconst useAxios = () => {\n  const {\n    logout\n  } = useContext(UserContext); // Get logout function from UserContext\n  const navigate = useNavigate(); // React Router hook to navigate programmatically\n\n  // Variable to prevent multiple refresh token attempts\n  let refreshTokenInProgress = false;\n\n  // Axios request interceptor to attach token to headers\n  axiosInstance.interceptors.request.use(config => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  }, error => {\n    return Promise.reject(error);\n  });\n\n  // Axios response interceptor to handle 401 errors (token expiration)\n  axiosInstance.interceptors.response.use(response => response, async error => {\n    const originalRequest = error.config;\n\n    // Check if the error is a 401 Unauthorized and it's not a retry\n    if (error.response && error.response.status === 401 && !originalRequest._retry) {\n      originalRequest._retry = true;\n\n      // Attempt to use refresh token\n      const refreshToken = localStorage.getItem('refreshToken');\n      if (!refreshToken || refreshTokenInProgress) {\n        // If no refresh token or a refresh is already in progress, log the user out\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        logout();\n        navigate('/login');\n        return Promise.reject(error);\n      }\n      refreshTokenInProgress = true; // Prevent multiple refresh attempts\n\n      try {\n        // Request a new access token using the refresh token\n        const response = await axiosInstance.post('/refresh_token', {\n          token: refreshToken\n        });\n\n        // Save the new access token\n        const newAccessToken = response.data.access_token;\n        localStorage.setItem('token', newAccessToken);\n\n        // Retry the original request with the new access token\n        originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n        refreshTokenInProgress = false; // Reset the flag after the refresh\n\n        return axiosInstance(originalRequest); // Retry the request\n      } catch (refreshError) {\n        // If refresh token fails (e.g., expired), log the user out\n        localStorage.removeItem('token');\n        localStorage.removeItem('refreshToken');\n        logout();\n        navigate('/login');\n        refreshTokenInProgress = false; // Reset the flag\n        return Promise.reject(refreshError);\n      }\n    }\n    return Promise.reject(error);\n  });\n  return axiosInstance;\n};\nexport default useAxios;","map":{"version":3,"names":["useContext","useNavigate","UserContext","axios","axiosInstance","create","baseURL","useAxios","logout","navigate","refreshTokenInProgress","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","removeItem","post","newAccessToken","data","access_token","setItem","refreshError"],"sources":["/home/coapr/development/projects/patent/client/src/utils/useAxios.js"],"sourcesContent":["// src/utils/useAxios.js\nimport { useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\nimport axios from 'axios';\n\n// Create the axios instance\nconst axiosInstance = axios.create({\n  baseURL: 'http://localhost:5000/api',\n});\n\nconst useAxios = () => {\n  const { logout } = useContext(UserContext); // Get logout function from UserContext\n  const navigate = useNavigate(); // React Router hook to navigate programmatically\n\n  // Variable to prevent multiple refresh token attempts\n  let refreshTokenInProgress = false;\n\n  // Axios request interceptor to attach token to headers\n  axiosInstance.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n    },\n    (error) => {\n      return Promise.reject(error);\n    }\n  );\n\n  // Axios response interceptor to handle 401 errors (token expiration)\n  axiosInstance.interceptors.response.use(\n    (response) => response,\n    async (error) => {\n      const originalRequest = error.config;\n\n      // Check if the error is a 401 Unauthorized and it's not a retry\n      if (error.response && error.response.status === 401 && !originalRequest._retry) {\n        originalRequest._retry = true;\n\n        // Attempt to use refresh token\n        const refreshToken = localStorage.getItem('refreshToken');\n        if (!refreshToken || refreshTokenInProgress) {\n          // If no refresh token or a refresh is already in progress, log the user out\n          localStorage.removeItem('token');\n          localStorage.removeItem('refreshToken');\n          logout();\n          navigate('/login');\n          return Promise.reject(error);\n        }\n\n        refreshTokenInProgress = true;  // Prevent multiple refresh attempts\n\n        try {\n          // Request a new access token using the refresh token\n          const response = await axiosInstance.post('/refresh_token', { token: refreshToken });\n\n          // Save the new access token\n          const newAccessToken = response.data.access_token;\n          localStorage.setItem('token', newAccessToken);\n\n          // Retry the original request with the new access token\n          originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;\n          refreshTokenInProgress = false;  // Reset the flag after the refresh\n\n          return axiosInstance(originalRequest);  // Retry the request\n        } catch (refreshError) {\n          // If refresh token fails (e.g., expired), log the user out\n          localStorage.removeItem('token');\n          localStorage.removeItem('refreshToken');\n          logout();\n          navigate('/login');\n          refreshTokenInProgress = false;  // Reset the flag\n          return Promise.reject(refreshError);\n        }\n      }\n\n      return Promise.reject(error);\n    }\n  );\n\n  return axiosInstance;\n};\n\nexport default useAxios;\n"],"mappings":"AAAA;AACA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,WAAW,QAAQ,wBAAwB;AACpD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAM;IAAEC;EAAO,CAAC,GAAGR,UAAU,CAACE,WAAW,CAAC,CAAC,CAAC;EAC5C,MAAMO,QAAQ,GAAGR,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA,IAAIS,sBAAsB,GAAG,KAAK;;EAElC;EACAN,aAAa,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;IACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IAClD;IACA,OAAOD,MAAM;EACf,CAAC,EACAM,KAAK,IAAK;IACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CACF,CAAC;;EAED;EACAhB,aAAa,CAACO,YAAY,CAACY,QAAQ,CAACV,GAAG,CACpCU,QAAQ,IAAKA,QAAQ,EACtB,MAAOH,KAAK,IAAK;IACf,MAAMI,eAAe,GAAGJ,KAAK,CAACN,MAAM;;IAEpC;IACA,IAAIM,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACE,MAAM,KAAK,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;MAC9EF,eAAe,CAACE,MAAM,GAAG,IAAI;;MAE7B;MACA,MAAMC,YAAY,GAAGX,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;MACzD,IAAI,CAACU,YAAY,IAAIjB,sBAAsB,EAAE;QAC3C;QACAM,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;QAChCZ,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;QACvCpB,MAAM,CAAC,CAAC;QACRC,QAAQ,CAAC,QAAQ,CAAC;QAClB,OAAOY,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;MAC9B;MAEAV,sBAAsB,GAAG,IAAI,CAAC,CAAE;;MAEhC,IAAI;QACF;QACA,MAAMa,QAAQ,GAAG,MAAMnB,aAAa,CAACyB,IAAI,CAAC,gBAAgB,EAAE;UAAEd,KAAK,EAAEY;QAAa,CAAC,CAAC;;QAEpF;QACA,MAAMG,cAAc,GAAGP,QAAQ,CAACQ,IAAI,CAACC,YAAY;QACjDhB,YAAY,CAACiB,OAAO,CAAC,OAAO,EAAEH,cAAc,CAAC;;QAE7C;QACAN,eAAe,CAACN,OAAO,CAACC,aAAa,GAAG,UAAUW,cAAc,EAAE;QAClEpB,sBAAsB,GAAG,KAAK,CAAC,CAAE;;QAEjC,OAAON,aAAa,CAACoB,eAAe,CAAC,CAAC,CAAE;MAC1C,CAAC,CAAC,OAAOU,YAAY,EAAE;QACrB;QACAlB,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;QAChCZ,YAAY,CAACY,UAAU,CAAC,cAAc,CAAC;QACvCpB,MAAM,CAAC,CAAC;QACRC,QAAQ,CAAC,QAAQ,CAAC;QAClBC,sBAAsB,GAAG,KAAK,CAAC,CAAE;QACjC,OAAOW,OAAO,CAACC,MAAM,CAACY,YAAY,CAAC;MACrC;IACF;IAEA,OAAOb,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;EAC9B,CACF,CAAC;EAED,OAAOhB,aAAa;AACtB,CAAC;AAED,eAAeG,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module"}