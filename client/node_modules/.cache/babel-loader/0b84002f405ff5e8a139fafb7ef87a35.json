{"ast":null,"code":"/**\n * @remix-run/router v1.20.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */\nvar Action;\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation() {\n    return entries[index];\n  }\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n  function createHref(to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  let history = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\"\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 1\n        });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta: 0\n        });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({\n          action,\n          location: nextLocation,\n          delta\n        });\n      }\n    },\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    },\n    // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n  function validateHashLocation(location, to) {\n    warning(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n}\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location, index) {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nfunction parsePath(path) {\n  let parsedPath = {};\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n  return parsedPath;\n}\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n  let index = getIndex();\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState(_extends({}, globalHistory.state, {\n      idx: index\n    }), \"\");\n  }\n  function getIndex() {\n    let state = globalHistory.state || {\n      idx: null\n    };\n    return state.idx;\n  }\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({\n        action,\n        location: history.location,\n        delta\n      });\n    }\n  }\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 1\n      });\n    }\n  }\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location,\n        delta: 0\n      });\n    }\n  }\n  function createURL(to) {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base = window.location.origin !== \"null\" ? window.location.origin : window.location.href;\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(base, \"No window.location.(origin|href) available to create URL for href: \" + href);\n    return new URL(href, base);\n  }\n  let history = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    }\n  };\n  return history;\n}\n//#endregion\n\nvar ResultType;\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\nconst immutableRouteKeys = new Set([\"lazy\", \"caseSensitive\", \"path\", \"id\", \"index\", \"children\"]);\nfunction isIndexRoute(route) {\n  return route.index === true;\n}\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes, mapRouteProperties, parentPath, manifest) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n  if (manifest === void 0) {\n    manifest = {};\n  }\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!manifest[id], \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, mapRouteProperties(route), {\n        id\n      });\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, mapRouteProperties(route), {\n        id,\n        children: undefined\n      });\n      manifest[id] = pathOrLayoutRoute;\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties, treePath, manifest);\n      }\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\nfunction matchRoutesImpl(routes, locationArg, basename, allowPartial) {\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n  if (pathname == null) {\n    return null;\n  }\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch(branches[i], decoded, allowPartial);\n  }\n  return matches;\n}\nfunction convertRouteMatchToUiMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n  let flattenRoute = (route, index, relativePath) => {\n    let meta = {\n      relativePath: relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n      // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  };\n  routes.forEach((route, index) => {\n    var _route$path;\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !((_route$path = route.path) != null && _route$path.includes(\"?\"))) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n  return branches;\n}\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path) {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n  let [first, ...rest] = segments;\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n  let result = [];\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(...restExploded.map(subpath => subpath === \"\" ? required : [required, subpath].join(\"/\")));\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map(exploded => path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded);\n}\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = s => s === \"*\";\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ?\n  // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] :\n  // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\nfunction matchRouteBranch(branch, pathname, allowPartial) {\n  if (allowPartial === void 0) {\n    allowPartial = false;\n  }\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    let route = meta.route;\n    if (!match && end && allowPartial && !routesMeta[routesMeta.length - 1].route.index) {\n      match = matchPath({\n        path: meta.relativePath,\n        caseSensitive: meta.caseSensitive,\n        end: false\n      }, remainingPathname);\n    }\n    if (!match) {\n      return null;\n    }\n    Object.assign(matchedParams, match.params);\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nfunction generatePath(originalPath, params) {\n  if (params === void 0) {\n    params = {};\n  }\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(false, \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n    path = path.replace(/\\*$/, \"/*\");\n  }\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n  const stringify = p => p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n  const segments = path.split(/\\/+/).map((segment, index, array) => {\n    const isLastSegment = index === array.length - 1;\n    // only apply the splat if it's the last segment\n    if (isLastSegment && segment === \"*\") {\n      const star = \"*\";\n      // Apply the splat\n      return stringify(params[star]);\n    }\n    const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n    if (keyMatch) {\n      const [, key, optional] = keyMatch;\n      let param = params[key];\n      invariant(optional === \"?\" || param != null, \"Missing \\\":\" + key + \"\\\" param\");\n      return stringify(param);\n    }\n    // Remove any optional markers from optional static segments\n    return segment.replace(/\\?$/g, \"\");\n  })\n  // Remove empty segments\n  .filter(segment => !!segment);\n  return prefix + segments.join(\"/\");\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n  let [matcher, compiledParams] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = compiledParams.reduce((memo, _ref, index) => {\n    let {\n      paramName,\n      isOptional\n    } = _ref;\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n    const value = captureGroups[index];\n    if (isOptional && !value) {\n      memo[paramName] = undefined;\n    } else {\n      memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n    }\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n  if (end === void 0) {\n    end = true;\n  }\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let params = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/\\/:([\\w-]+)(\\?)?/g, (_, paramName, isOptional) => {\n    params.push({\n      paramName,\n      isOptional: isOptional != null\n    });\n    return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n  });\n  if (path.endsWith(\"*\")) {\n    params.push({\n      paramName: \"*\"\n    });\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, params];\n}\nfunction decodePath(value) {\n  try {\n    return value.split(\"/\").map(v => decodeURIComponent(v).replace(/\\//g, \"%2F\")).join(\"/\");\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n  return pathname.slice(startIndex) || \"/\";\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches, v7_relativeSplatPath) {\n  let pathMatches = getPathContributingMatches(matches);\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) => idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase);\n  }\n  return pathMatches.map(match => match.pathnameBase);\n}\n/**\n * @private\n */\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n  let to;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from;\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n      to.pathname = toSegments.join(\"/\");\n    }\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n  let path = resolvePath(to, from);\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n  return path;\n}\n/**\n * @private\n */\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\nclass DataWithResponseInit {\n  constructor(data, init) {\n    this.type = \"DataWithResponseInit\";\n    this.data = data;\n    this.init = init || null;\n  }\n}\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nfunction data(data, init) {\n  return new DataWithResponseInit(data, typeof init === \"number\" ? {\n    status: init\n  } : init);\n}\nclass AbortedDeferredError extends Error {}\nclass DeferredData {\n  constructor(data, responseInit) {\n    this.pendingKeysSet = new Set();\n    this.subscribers = new Set();\n    this.deferredKeys = [];\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\");\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n    this.init = responseInit;\n  }\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, undefined, data), error => this.onSettle(promise, key, error));\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n    this.pendingKeysSet.delete(key);\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\"Deferred data for key \\\"\" + key + \"\\\" resolved/rejected with `undefined`, \" + \"you must resolve/reject with a value or `null`.\");\n      Object.defineProperty(promise, \"_error\", {\n        get: () => undefinedError\n      });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    this.emit(false, key);\n    return data;\n  }\n  emit(aborted, settledKey) {\n    this.subscribers.forEach(subscriber => subscriber(aborted, settledKey));\n  }\n  subscribe(fn) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n  async resolveData(signal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref3) => {\n      let [key, value] = _ref3;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\nconst defer = function defer(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  return new DeferredData(data, responseInit);\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst redirectDocument = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nconst replace = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nclass ErrorResponseImpl {\n  constructor(status, statusText, data, internal) {\n    if (internal === void 0) {\n      internal = false;\n    }\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nfunction isRouteErrorResponse(error) {\n  return error != null && typeof error.status === \"number\" && typeof error.statusText === \"string\" && typeof error.internal === \"boolean\" && \"data\" in error;\n}\nconst validMutationMethodsArr = [\"post\", \"put\", \"patch\", \"delete\"];\nconst validMutationMethods = new Set(validMutationMethodsArr);\nconst validRequestMethodsArr = [\"get\", ...validMutationMethodsArr];\nconst validRequestMethods = new Set(validRequestMethodsArr);\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined\n};\nconst IDLE_BLOCKER = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined\n};\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\nconst defaultMapRouteProperties = route => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary)\n});\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */\nfunction createRouter(init) {\n  const routerWindow = init.window ? init.window : typeof window !== \"undefined\" ? window : undefined;\n  const isBrowser = typeof routerWindow !== \"undefined\" && typeof routerWindow.document !== \"undefined\" && typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let mapRouteProperties;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Routes keyed by ID\n  let manifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties, undefined, manifest);\n  let inFlightDataRoutes;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n  // Config driven behavior flags\n  let future = _extends({\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false\n  }, init.future);\n  // Cleanup function for history\n  let unlistenHistory = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors = null;\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname\n    });\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(initialMatches, dataRoutes, init.history.location.pathname);\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n  let initialized;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(null, dataRoutes, init.history.location.pathname);\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some(m => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some(m => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(m => errors[m.route.id] !== undefined);\n      initialized = initialMatches.slice(0, idx + 1).every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(m => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map()\n  };\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction = Action.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController;\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions = new Map();\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener = null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads = new Set();\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map();\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map();\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map();\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map();\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map();\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate = undefined;\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location,\n        delta\n      } = _ref;\n      // Ignore this event if it was just us resetting the URL from a\n      // blocked POP navigation\n      if (unblockBlockerHistoryUpdate) {\n        unblockBlockerHistoryUpdate();\n        unblockBlockerHistoryUpdate = undefined;\n        return;\n      }\n      warning(blockerFunctions.size === 0 || delta != null, \"You are trying to use a blocker on a POP navigation to a location \" + \"that was not created by @remix-run/router. This will fail silently in \" + \"production. This can happen if you are navigating outside the router \" + \"via `window.history.pushState`/`window.location.hash` instead of using \" + \"router navigation APIs.  This can also happen if you are using \" + \"createHashRouter and the user manually changes the URL.\");\n      let blockerKey = shouldBlockNavigation({\n        currentLocation: state.location,\n        nextLocation: location,\n        historyAction\n      });\n      if (blockerKey && delta != null) {\n        // Restore the URL to match the current UI, but don't update router state\n        let nextHistoryUpdatePromise = new Promise(resolve => {\n          unblockBlockerHistoryUpdate = resolve;\n        });\n        init.history.go(delta * -1);\n        // Put the blocker into a blocked state\n        updateBlocker(blockerKey, {\n          state: \"blocked\",\n          location,\n          proceed() {\n            updateBlocker(blockerKey, {\n              state: \"proceeding\",\n              proceed: undefined,\n              reset: undefined,\n              location\n            });\n            // Re-do the same POP navigation we just blocked, after the url\n            // restoration is also complete.  See:\n            // https://github.com/remix-run/react-router/issues/11613\n            nextHistoryUpdatePromise.then(() => init.history.go(delta));\n          },\n          reset() {\n            let blockers = new Map(state.blockers);\n            blockers.set(blockerKey, IDLE_BLOCKER);\n            updateState({\n              blockers\n            });\n          }\n        });\n        return;\n      }\n      return startNavigation(historyAction, location);\n    });\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () => routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location, {\n        initialHydration: true\n      });\n    }\n    return router;\n  }\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n  // Subscribe to state updates for the router\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n  // Update our state and notify the calling context of the change\n  function updateState(newState, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state = _extends({}, state, newState);\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers = [];\n    let deletedFetchersKeys = [];\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach(subscriber => subscriber(state, {\n      deletedFetchers: deletedFetchersKeys,\n      viewTransitionOpts: opts.viewTransitionOpts,\n      flushSync: opts.flushSync === true\n    }));\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach(key => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach(key => deleteFetcher(key));\n    }\n  }\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(location, newState, _temp) {\n    var _location$state, _location$state2;\n    let {\n      flushSync\n    } = _temp === void 0 ? {} : _temp;\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === \"loading\" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;\n    let actionData;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    }\n    let viewTransitionOpts;\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === Action.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location\n      };\n    }\n    updateState(_extends({}, newState, {\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset,\n      blockers\n    }), {\n      viewTransitionOpts,\n      flushSync: flushSync === true\n    });\n    // Reset stateful navigation vars\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = _extends({}, nextLocation, init.history.encodeLocation(nextLocation));\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n    let historyAction = Action.Push;\n    if (userReplace === true) {\n      historyAction = Action.Replace;\n    } else if (userReplace === false) ;else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = Action.Replace;\n    }\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    let flushSync = (opts && opts.flushSync) === true;\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction\n    });\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey, IDLE_BLOCKER);\n          updateState({\n            blockers\n          });\n        }\n      });\n      return;\n    }\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync\n    });\n  }\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    });\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    }\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation,\n      // Proxy through any rending view transition\n      enableViewTransition: pendingViewTransitionEnabled === true\n    });\n  }\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        error,\n        notFoundMatches,\n        route\n      } = handleNavigational404(location.pathname);\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {\n      completeNavigation(location, {\n        matches\n      }, {\n        flushSync\n      });\n      return;\n    }\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionResult;\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [findNearestBoundary(matches).route.id, {\n        type: ResultType.error,\n        error: opts.pendingError\n      }];\n    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(request, location, opts.submission, matches, fogOfWar.active, {\n        replace: opts.replace,\n        flushSync\n      });\n      if (actionResult.shortCircuited) {\n        return;\n      }\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (isErrorResult(result) && isRouteErrorResponse(result.error) && result.error.status === 404) {\n          pendingNavigationController = null;\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error\n            }\n          });\n          return;\n        }\n      }\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n      // Create a GET request for the loaders\n      request = createClientSideRequest(init.history, request.url, request.signal);\n    }\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, fogOfWar.active, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionResult);\n    if (shortCircuited) {\n      return;\n    }\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    completeNavigation(location, _extends({\n      matches: updatedMatches || matches\n    }, getActionDataForCommit(pendingActionResult), {\n      loaderData,\n      errors\n    }));\n  }\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(request, location, submission, matches, isFogOfWar, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    interruptActiveLoads();\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({\n      navigation\n    }, {\n      flushSync: opts.flushSync === true\n    });\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [boundaryId, {\n            type: ResultType.error,\n            error: discoverResult.error\n          }]\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          notFoundMatches,\n          error,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [route.id, {\n            type: ResultType.error,\n            error\n          }]\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    // Call our action and get the result\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id\n        })\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", state, request, [actionMatch], matches, null);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n    if (isRedirectResult(result)) {\n      let replace;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(result.response.headers.get(\"Location\"), new URL(request.url), basename);\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result]\n      };\n    }\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result]\n    };\n  }\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(request, location, matches, isFogOfWar, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionResult) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState = !isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration);\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(_extends({\n          navigation: loadingNavigation\n        }, actionData !== undefined ? {\n          actionData\n        } : {}), {\n          flushSync\n        });\n      }\n      let discoverResult = await discoverRoutes(matches, location.pathname, request.signal);\n      if (discoverResult.type === \"aborted\") {\n        return {\n          shortCircuited: true\n        };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches).route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error\n          }\n        };\n      } else if (!discoverResult.matches) {\n        let {\n          error,\n          notFoundMatches,\n          route\n        } = handleNavigational404(location.pathname);\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error\n          }\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult);\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId));\n    pendingNavigationLoadId = ++incrementingLoadId;\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(location, _extends({\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null\n      }, getActionDataForCommit(pendingActionResult), updatedFetchers ? {\n        fetchers: new Map(state.fetchers)\n      } : {}), {\n        flushSync\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    if (shouldUpdateNavigationState) {\n      let updates = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, {\n        flushSync\n      });\n    }\n    revalidatingFetchers.forEach(rf => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(f => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, request);\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    }\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    }\n    revalidatingFetchers.forEach(rf => fetchControllers.delete(rf.key));\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace\n      });\n      return {\n        shortCircuited: true\n      };\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = _extends({}, state.errors, errors);\n    }\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n    return _extends({\n      matches,\n      loaderData,\n      errors\n    }, shouldUpdateFetchers ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n  function getUpdatedActionData(pendingActionResult) {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n  function getUpdatedRevalidatingFetchers(revalidatingFetchers) {\n    revalidatingFetchers.forEach(rf => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(undefined, fetcher ? fetcher.data : undefined);\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n    abortFetcher(key);\n    let flushSync = (opts && opts.flushSync) === true;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n    if (!matches) {\n      setFetcherError(key, routeId, getInternalRouterError(404, {\n        pathname: normalizedPath\n      }), {\n        flushSync\n      });\n      return;\n    }\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);\n    if (error) {\n      setFetcherError(key, routeId, error, {\n        flushSync\n      });\n      return;\n    }\n    let match = getTargetMatch(matches, path);\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n      return;\n    }\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, {\n      routeId,\n      path\n    });\n    handleFetcherLoader(key, routeId, path, match, matches, fogOfWar.active, flushSync, preventScrollReset, submission);\n  }\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n    function detectAndHandle405Error(m) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId\n        });\n        setFetcherError(key, routeId, error, {\n          flushSync\n        });\n        return true;\n      }\n      return false;\n    }\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(requestMatches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\"action\", state, fetchRequest, [match], requestMatches, key);\n    let actionResult = actionResults[match.route.id];\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset\n          });\n        }\n      }\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n    }\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, submission, nextLocation, false, future.v7_skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, [match.route.id, actionResult]);\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers.filter(rf => rf.key !== key).forEach(rf => {\n      let staleKey = rf.key;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = getLoadingFetcher(undefined, existingFetcher ? existingFetcher.data : undefined);\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      abortFetcher(staleKey);\n      if (rf.controller) {\n        fetchControllers.set(staleKey, rf.controller);\n      }\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach(rf => abortFetcher(rf.key));\n    abortController.signal.addEventListener(\"abort\", abortPendingFetchRevalidations);\n    let {\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n    if (abortController.signal.aborted) {\n      return;\n    }\n    abortController.signal.removeEventListener(\"abort\", abortPendingFetchRevalidations);\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(r => fetchControllers.delete(r.key));\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(revalidationRequest, redirect.result, false, {\n        preventScrollReset\n      });\n    }\n    // Process and commit output from loaders\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n    abortStaleFetchLoads(loadId);\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),\n        fetchers: new Map(state.fetchers)\n      });\n      isRevalidationRequired = false;\n    }\n  }\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(key, routeId, path, match, matches, isFogOfWar, flushSync, preventScrollReset, submission) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : undefined), {\n      flushSync\n    });\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(matches, path, fetchRequest.signal);\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, {\n          flushSync\n        });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(key, routeId, getInternalRouterError(404, {\n          pathname: path\n        }), {\n          flushSync\n        });\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\"loader\", state, fetchRequest, [match], matches, key);\n    let result = results[match.route.id];\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    }\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset\n        });\n        return;\n      }\n    }\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(request, redirect, isNavigation, _temp2) {\n    let {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace\n    } = _temp2 === void 0 ? {} : _temp2;\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(location, new URL(request.url), basename);\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true\n    });\n    if (isBrowser) {\n      let isDocumentReload = false;\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n        // Hard reload if it's an absolute URL to a new origin\n        url.origin !== routerWindow.location.origin ||\n        // Hard reload if it's an absolute URL that does not match our basename\n        stripBasename(url.pathname, basename) == null;\n      }\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true || redirect.response.headers.has(\"X-Remix-Replace\") ? Action.Replace : Action.Push;\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let {\n      formMethod,\n      formAction,\n      formEncType\n    } = state.navigation;\n    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (redirectPreserveMethodStatusCodes.has(redirect.response.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: _extends({}, activeSubmission, {\n          formAction: location\n        }),\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation ? pendingViewTransitionEnabled : undefined\n      });\n    }\n  }\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, state, request, matchesToLoad, matches, fetcherKey) {\n    let results;\n    let dataResults = {};\n    try {\n      results = await callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties);\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach(m => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e\n        };\n      });\n      return dataResults;\n    }\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, future.v7_relativeSplatPath)\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(result);\n      }\n    }\n    return dataResults;\n  }\n  async function callLoadersAndMaybeResolveData(state, matches, matchesToLoad, fetchersToLoad, request) {\n    let currentMatches = state.matches;\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\"loader\", state, request, matchesToLoad, matches, null);\n    let fetcherResultsPromise = Promise.all(fetchersToLoad.map(async f => {\n      if (f.matches && f.match && f.controller) {\n        let results = await callDataStrategy(\"loader\", state, createClientSideRequest(init.history, f.path, f.controller.signal), [f.match], f.matches, f.key);\n        let result = results[f.match.route.id];\n        // Fetcher results are keyed by fetcher key from here on out, not routeId\n        return {\n          [f.key]: result\n        };\n      } else {\n        return Promise.resolve({\n          [f.key]: {\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path\n            })\n          }\n        });\n      }\n    }));\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce((acc, r) => Object.assign(acc, r), {});\n    await Promise.all([resolveNavigationDeferredResults(matches, loaderResults, request.signal, currentMatches, state.loaderData), resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad)]);\n    return {\n      loaderResults,\n      fetcherResults\n    };\n  }\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n  function updateFetcherState(key, fetcher, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function setFetcherError(key, routeId, error, opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    }, {\n      flushSync: (opts && opts.flushSync) === true\n    });\n  }\n  function getFetcher(key) {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n  function deleteFetcher(key) {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (fetchControllers.has(key) && !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n  function deleteFetcherAndUpdateState(key) {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n  function getBlocker(key, fn) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n    return blocker;\n  }\n  function deleteBlocker(key) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key, newBlocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(blocker.state === \"unblocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"blocked\" || blocker.state === \"blocked\" && newBlocker.state === \"proceeding\" || blocker.state === \"blocked\" && newBlocker.state === \"unblocked\" || blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\", \"Invalid blocker state transition: \" + blocker.state + \" -> \" + newBlocker.state);\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({\n      blockers\n    });\n  }\n  function shouldBlockNavigation(_ref2) {\n    let {\n      currentLocation,\n      nextLocation,\n      historyAction\n    } = _ref2;\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({\n      currentLocation,\n      nextLocation,\n      historyAction\n    })) {\n      return blockerKey;\n    }\n  }\n  function handleNavigational404(pathname) {\n    let error = getInternalRouterError(404, {\n      pathname\n    });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let {\n      matches,\n      route\n    } = getShortCircuitMatches(routesToUse);\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n    return {\n      notFoundMatches: matches,\n      route,\n      error\n    };\n  }\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n  function getScrollKey(location, matches) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(location, matches.map(m => convertRouteMatchToUiMatch(m, state.loaderData)));\n      return key || location.key;\n    }\n    return location.key;\n  }\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n  function checkFogOfWar(matches, routesToUse, pathname) {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n        return {\n          active: true,\n          matches: fogMatches || []\n        };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n          return {\n            active: true,\n            matches: partialMatches\n          };\n        }\n      }\n    }\n    return {\n      active: false,\n      matches: null\n    };\n  }\n  async function discoverRoutes(matches, pathname, signal) {\n    if (!patchRoutesOnNavigationImpl) {\n      return {\n        type: \"success\",\n        matches\n      };\n    }\n    let partialMatches = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(routeId, children, routesToUse, localManifest, mapRouteProperties);\n          }\n        });\n      } catch (e) {\n        return {\n          type: \"error\",\n          error: e,\n          partialMatches\n        };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n      if (signal.aborted) {\n        return {\n          type: \"aborted\"\n        };\n      }\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return {\n          type: \"success\",\n          matches: newMatches\n        };\n      }\n      let newPartialMatches = matchRoutesImpl(routesToUse, pathname, basename, true);\n      // Avoid loops if the second pass results in the same partial matches\n      if (!newPartialMatches || partialMatches.length === newPartialMatches.length && partialMatches.every((m, i) => m.route.id === newPartialMatches[i].route.id)) {\n        return {\n          type: \"success\",\n          matches: null\n        };\n      }\n      partialMatches = newPartialMatches;\n    }\n  }\n  function _internalSetRoutes(newRoutes) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties, undefined, manifest);\n  }\n  function patchRoutes(routeId, children) {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties);\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    encodeLocation: to => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes\n  };\n  return router;\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\nfunction createStaticHandler(routes, opts) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to createStaticHandler\");\n  let manifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties;\n  if (opts != null && opts.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts != null && opts.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = route => ({\n      hasErrorBoundary: detectErrorBoundary(route)\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future = _extends({\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false\n  }, opts ? opts.future : null);\n  let dataRoutes = convertRoutesToDataRoutes(routes, mapRouteProperties, undefined, manifest);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(request, _temp3) {\n    let {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy\n    } = _temp3 === void 0 ? {} : _temp3;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, {\n        method\n      });\n      let {\n        matches: methodNotAllowedMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n      let {\n        matches: notFoundMatches,\n        route\n      } = getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, skipLoaderErrorBubbling === true, null);\n    if (isResponse(result)) {\n      return result;\n    }\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return _extends({\n      location,\n      basename\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(request, _temp4) {\n    let {\n      routeId,\n      requestContext,\n      dataStrategy\n    } = _temp4 === void 0 ? {} : _temp4;\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, {\n        method\n      });\n    } else if (!matches) {\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, {\n        pathname: location.pathname\n      });\n    }\n    let result = await queryImpl(request, location, matches, requestContext, dataStrategy || null, false, match);\n    if (isResponse(result)) {\n      return result;\n    }\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n    if (result.loaderData) {\n      var _result$activeDeferre;\n      let data = Object.values(result.loaderData)[0];\n      if ((_result$activeDeferre = result.activeDeferreds) != null && _result$activeDeferre[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n    return undefined;\n  }\n  async function queryImpl(request, location, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch != null);\n        return result;\n      }\n      let result = await loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch);\n      return isResponse(result) ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n  async function submit(request, matches, actionMatch, requestContext, dataStrategy, skipLoaderErrorBubbling, isRouteRequest) {\n    let result;\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    } else {\n      let results = await callDataStrategy(\"action\", request, [actionMatch], matches, isRouteRequest, requestContext, dataStrategy);\n      result = results[actionMatch.route.id];\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")\n        }\n      });\n    }\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, {\n        type: \"defer-action\"\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error\n      };\n    }\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal\n    });\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling ? actionMatch : findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null, [boundaryMatch.route.id, result]);\n      // action status codes take precedence over loader status codes\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : result.statusCode != null ? result.statusCode : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n    let context = await loadRouteData(loaderRequest, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, null);\n    return _extends({}, context, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      }\n    }, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionHeaders: result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {}\n    });\n  }\n  async function loadRouteData(request, matches, requestContext, dataStrategy, skipLoaderErrorBubbling, routeMatch, pendingActionResult) {\n    let isRouteRequest = routeMatch != null;\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !(routeMatch != null && routeMatch.route.loader) && !(routeMatch != null && routeMatch.route.lazy)) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch == null ? void 0 : routeMatch.route.id\n      });\n    }\n    let requestMatches = routeMatch ? [routeMatch] : pendingActionResult && isErrorResult(pendingActionResult[1]) ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]) : matches;\n    let matchesToLoad = requestMatches.filter(m => m.route.loader || m.route.lazy);\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce((acc, m) => Object.assign(acc, {\n          [m.route.id]: null\n        }), {}),\n        errors: pendingActionResult && isErrorResult(pendingActionResult[1]) ? {\n          [pendingActionResult[0]]: pendingActionResult[1].error\n        } : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null\n      };\n    }\n    let results = await callDataStrategy(\"loader\", request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy);\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n    // Process and commit output from loaders\n    let activeDeferreds = new Map();\n    let context = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling);\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set(matchesToLoad.map(match => match.route.id));\n    matches.forEach(match => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n    return _extends({}, context, {\n      matches,\n      activeDeferreds: activeDeferreds.size > 0 ? Object.fromEntries(activeDeferreds.entries()) : null\n    });\n  }\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(type, request, matchesToLoad, matches, isRouteRequest, requestContext, dataStrategy) {\n    let results = await callDataStrategyImpl(dataStrategy || defaultDataStrategy, type, null, request, matchesToLoad, matches, null, manifest, mapRouteProperties, requestContext);\n    let dataResults = {};\n    await Promise.all(matches.map(async match => {\n      if (!(match.route.id in results)) {\n        return;\n      }\n      let result = results[match.route.id];\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result;\n        // Throw redirects and let the server handle them with an HTTP redirect\n        throw normalizeRelativeRoutingRedirectResponse(response, request, match.route.id, matches, basename, future.v7_relativeSplatPath);\n      }\n      if (isResponse(result.result) && isRouteRequest) {\n        // For SSR single-route requests, we want to hand Responses back\n        // directly without unwrapping\n        throw result;\n      }\n      dataResults[match.route.id] = await convertDataStrategyResultToDataResult(result);\n    }));\n    return dataResults;\n  }\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n}\n//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n  return newContext;\n}\nfunction throwStaticHandlerAbortedError(request, isRouteRequest, future) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(method + \"() call aborted: \" + request.method + \" \" + request.url);\n}\nfunction isSubmissionNavigation(opts) {\n  return opts != null && (\"formData\" in opts && opts.formData != null || \"body\" in opts && opts.body !== undefined);\n}\nfunction normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {\n  let contextualMatches;\n  let activeRouteMatch;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n  // Resolve the relative path\n  let path = resolveTo(to ? to : \".\", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === \"path\");\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search ? path.search.replace(/^\\?/, \"?index&\") : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter(v => v).forEach(v => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? \"?\" + qs : \"\";\n    }\n  }\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname = path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n  return createPath(path);\n}\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return {\n      path\n    };\n  }\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, {\n        method: opts.formMethod\n      })\n    };\n  }\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, {\n      type: \"invalid-body\"\n    })\n  });\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();\n  let formAction = stripHashFromPath(path);\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      let text = typeof opts.body === \"string\" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ?\n      // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n      Array.from(opts.body.entries()).reduce((acc, _ref3) => {\n        let [name, value] = _ref3;\n        return \"\" + acc + name + \"=\" + value + \"\\n\";\n      }, \"\") : String(opts.body);\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text\n        }\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n      try {\n        let json = typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined\n          }\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n  invariant(typeof FormData === \"function\", \"FormData is not available in this environment\");\n  let searchParams;\n  let formData;\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n  let submission = {\n    formMethod,\n    formAction,\n    formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined\n  };\n  if (isMutationMethod(submission.formMethod)) {\n    return {\n      path,\n      submission\n    };\n  }\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = \"?\" + searchParams;\n  return {\n    path: createPath(parsedPath),\n    submission\n  };\n}\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId, includeBoundary) {\n  if (includeBoundary === void 0) {\n    includeBoundary = false;\n  }\n  let index = matches.findIndex(m => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\nfunction getMatchesToLoad(history, state, matches, submission, location, initialHydration, skipActionErrorRevalidation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionResult) {\n  let actionResult = pendingActionResult ? isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : pendingActionResult[1].data : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, Object.keys(state.errors)[0], true);\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(matches, pendingActionResult[0]);\n  }\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult ? pendingActionResult[1].statusCode : undefined;\n  let shouldSkipRevalidation = skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let {\n      route\n    } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n    if (route.loader == null) {\n      return false;\n    }\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n    // Always call the loader on new route instances and pending defer cancellations\n    if (isNewLoader(state.loaderData, state.matches[index], match) || cancelledDeferredRoutes.some(id => id === match.route.id)) {\n      return true;\n    }\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n    return shouldRevalidateLoader(match, _extends({\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params\n    }, submission, {\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation ? false :\n      // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n      isRevalidationRequired || currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search ||\n      // Search params affect all loaders\n      currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)\n    }));\n  });\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (initialHydration || !matches.some(m => m.route.id === f.routeId) || deletedFetchers.has(key)) {\n      return;\n    }\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null\n      });\n      return;\n    }\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (fetcher && fetcher.state !== \"idle\" && fetcher.data === undefined) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends({\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params\n      }, submission, {\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation ? false : isRevalidationRequired\n      }));\n    }\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController()\n      });\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\nfunction shouldLoadRouteOnHydration(route, loaderData, errors) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew =\n  // [a] -> [a, b]\n  !currentMatch ||\n  // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id;\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath != null && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\nfunction shouldRevalidateLoader(loaderMatch, arg) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n  return arg.defaultShouldRevalidate;\n}\nfunction patchRoutesImpl(routeId, children, routesToUse, manifest, mapRouteProperties) {\n  var _childrenToPatch;\n  let childrenToPatch;\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(route, \"No route found to patch children into: routeId = \" + routeId);\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(newRoute => !childrenToPatch.some(existingRoute => isSameRoute(newRoute, existingRoute)));\n  let newRoutes = convertRoutesToDataRoutes(uniqueChildren, mapRouteProperties, [routeId || \"_\", \"patch\", String(((_childrenToPatch = childrenToPatch) == null ? void 0 : _childrenToPatch.length) || \"0\")], manifest);\n  childrenToPatch.push(...newRoutes);\n}\nfunction isSameRoute(newRoute, existingRoute) {\n  // Most optimal check is by id\n  if (\"id\" in newRoute && \"id\" in existingRoute && newRoute.id === existingRoute.id) {\n    return true;\n  }\n  // Second is by pathing differences\n  if (!(newRoute.index === existingRoute.index && newRoute.path === existingRoute.path && newRoute.caseSensitive === existingRoute.caseSensitive)) {\n    return false;\n  }\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if ((!newRoute.children || newRoute.children.length === 0) && (!existingRoute.children || existingRoute.children.length === 0)) {\n    return true;\n  }\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children.every((aChild, i) => {\n    var _existingRoute$childr;\n    return (_existingRoute$childr = existingRoute.children) == null ? void 0 : _existingRoute$childr.some(bChild => isSameRoute(aChild, bChild));\n  });\n}\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(route, mapRouteProperties, manifest) {\n  if (!route.lazy) {\n    return;\n  }\n  let lazyRoute = await route.lazy();\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue = routeToUpdate[lazyRouteProperty];\n    let isPropertyStaticallyDefined = staticRouteValue !== undefined &&\n    // This property isn't static since it should always be updated based\n    // on the route updates\n    lazyRouteProperty !== \"hasErrorBoundary\";\n    warning(!isPropertyStaticallyDefined, \"Route \\\"\" + routeToUpdate.id + \"\\\" has a static property \\\"\" + lazyRouteProperty + \"\\\" \" + \"defined but its lazy function is also returning a value for this property. \" + (\"The lazy route property \\\"\" + lazyRouteProperty + \"\\\" will be ignored.\"));\n    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {\n      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];\n    }\n  }\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, _extends({}, mapRouteProperties(routeToUpdate), {\n    lazy: undefined\n  }));\n}\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy(_ref4) {\n  let {\n    matches\n  } = _ref4;\n  let matchesToLoad = matches.filter(m => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map(m => m.resolve()));\n  return results.reduce((acc, result, i) => Object.assign(acc, {\n    [matchesToLoad[i].route.id]: result\n  }), {});\n}\nasync function callDataStrategyImpl(dataStrategyImpl, type, state, request, matchesToLoad, matches, fetcherKey, manifest, mapRouteProperties, requestContext) {\n  let loadRouteDefinitionsPromises = matches.map(m => m.route.lazy ? loadLazyRouteModule(m.route, mapRouteProperties, manifest) : undefined);\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some(m => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve = async handlerOverride => {\n      if (handlerOverride && request.method === \"GET\" && (match.route.lazy || match.route.loader)) {\n        shouldLoad = true;\n      }\n      return shouldLoad ? callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, requestContext) : Promise.resolve({\n        type: ResultType.data,\n        result: undefined\n      });\n    };\n    return _extends({}, match, {\n      shouldLoad,\n      resolve\n    });\n  });\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext\n  });\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n  return results;\n}\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type, request, match, loadRoutePromise, handlerOverride, staticContext) {\n  let result;\n  let onReject;\n  let runHandler = handler => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise((_, r) => reject = r);\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n    let actualHandler = ctx => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \" + (\"\\\"\" + type + \"\\\" [routeId: \" + match.route.id + \"]\")));\n      }\n      return handler({\n        request,\n        params: match.params,\n        context: staticContext\n      }, ...(ctx !== undefined ? [ctx] : []));\n    };\n    let handlerPromise = (async () => {\n      try {\n        let val = await (handlerOverride ? handlerOverride(ctx => actualHandler(ctx)) : actualHandler());\n        return {\n          type: \"data\",\n          result: val\n        };\n      } catch (e) {\n        return {\n          type: \"error\",\n          result: e\n        };\n      }\n    })();\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n  try {\n    let handler = match.route[type];\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n        // If the handler throws, don't let it immediately bubble out,\n        // since we need to let the lazy() execution finish so we know if this\n        // route has a boundary that can handle the error\n        runHandler(handler).catch(e => {\n          handlerError = e;\n        }), loadRoutePromise]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return {\n            type: ResultType.data,\n            result: undefined\n          };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n    invariant(result.result !== undefined, \"You defined \" + (type === \"action\" ? \"an action\" : \"a loader\") + \" for route \" + (\"\\\"\" + match.route.id + \"\\\" but didn't return anything from your `\" + type + \"` \") + \"function. Please return a value or `null`.\");\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return {\n      type: ResultType.error,\n      result: e\n    };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n  return result;\n}\nasync function convertDataStrategyResultToDataResult(dataStrategyResult) {\n  let {\n    result,\n    type\n  } = dataStrategyResult;\n  if (isResponse(result)) {\n    let data;\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers\n      };\n    }\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      var _result$init2;\n      if (result.data instanceof Error) {\n        var _result$init;\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status\n        };\n      }\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(((_result$init2 = result.init) == null ? void 0 : _result$init2.status) || 500, undefined, result.data);\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined\n    };\n  }\n  if (isDeferredData(result)) {\n    var _result$init3, _result$init4;\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: (_result$init3 = result.init) == null ? void 0 : _result$init3.status,\n      headers: ((_result$init4 = result.init) == null ? void 0 : _result$init4.headers) && new Headers(result.init.headers)\n    };\n  }\n  if (isDataWithResponseInit(result)) {\n    var _result$init5, _result$init6;\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: (_result$init5 = result.init) == null ? void 0 : _result$init5.status,\n      headers: (_result$init6 = result.init) != null && _result$init6.headers ? new Headers(result.init.headers) : undefined\n    };\n  }\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response, request, routeId, matches, basename, v7_relativeSplatPath) {\n  let location = response.headers.get(\"Location\");\n  invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\");\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1);\n    location = normalizeTo(new URL(request.url), trimmedMatches, basename, true, location, v7_relativeSplatPath);\n    response.headers.set(\"Location\", location);\n  }\n  return response;\n}\nfunction normalizeRedirectLocation(location, currentUrl, basename) {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\") ? new URL(currentUrl.protocol + normalizedLocation) : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history, location, signal, submission) {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init = {\n    signal\n  };\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let {\n      formMethod,\n      formEncType\n    } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({\n        \"Content-Type\": formEncType\n      });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (formEncType === \"application/x-www-form-urlencoded\" && submission.formData) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n  return new Request(url, init);\n}\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n  return searchParams;\n}\nfunction convertSearchParamsToFormData(searchParams) {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\nfunction processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, skipLoaderErrorBubbling) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {};\n  let pendingError = pendingActionResult && isErrorResult(pendingActionResult[1]) ? pendingActionResult[1].error : undefined;\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach(match => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n      errors = errors || {};\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = {\n      [pendingActionResult[0]]: pendingError\n    };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\nfunction processLoaderData(state, matches, results, pendingActionResult, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, results, pendingActionResult, activeDeferreds, false // This method is only called client side so we always want to bubble\n  );\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(rf => {\n    let {\n      key,\n      match,\n      controller\n    } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match == null ? void 0 : match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\nfunction mergeLoaderData(loaderData, newLoaderData, matches, errors) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\nfunction getActionDataForCommit(pendingActionResult) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1]) ? {\n    // Clear out prior actionData on errors\n    actionData: {}\n  } : {\n    actionData: {\n      [pendingActionResult[0]]: pendingActionResult[1].data\n    }\n  };\n}\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\nfunction getShortCircuitMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.length === 1 ? routes[0] : routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-error-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route\n  };\n}\nfunction getInternalRouterError(status, _temp5) {\n  let {\n    pathname,\n    routeId,\n    method,\n    type,\n    message\n  } = _temp5 === void 0 ? {} : _temp5;\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide a `loader` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = \"Route \\\"\" + routeId + \"\\\" does not match URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = \"No route matches URL \\\"\" + pathname + \"\\\"\";\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage = \"You made a \" + method.toUpperCase() + \" request to \\\"\" + pathname + \"\\\" but \" + (\"did not provide an `action` for route \\\"\" + routeId + \"\\\", \") + \"so there is no way to handle the request.\";\n    } else if (method) {\n      errorMessage = \"Invalid request method \\\"\" + method.toUpperCase() + \"\\\"\";\n    }\n  }\n  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);\n}\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results) {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return {\n        key,\n        result\n      };\n    }\n  }\n}\nfunction stripHashFromPath(path) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath(_extends({}, parsedPath, {\n    hash: \"\"\n  }));\n}\nfunction isHashChangeOnly(a, b) {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\nfunction isDataStrategyResult(result) {\n  return result != null && typeof result === \"object\" && \"type\" in result && \"result\" in result && (result.type === ResultType.data || result.type === ResultType.error);\n}\nfunction isRedirectDataStrategyResultResult(result) {\n  return isResponse(result.result) && redirectStatusCodes.has(result.result.status);\n}\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\nfunction isDataWithResponseInit(value) {\n  return typeof value === \"object\" && value != null && \"type\" in value && \"data\" in value && \"init\" in value && value.type === \"DataWithResponseInit\";\n}\nfunction isDeferredData(value) {\n  let deferred = value;\n  return deferred && typeof deferred === \"object\" && typeof deferred.data === \"object\" && typeof deferred.subscribe === \"function\" && typeof deferred.cancel === \"function\" && typeof deferred.resolveData === \"function\";\n}\nfunction isResponse(value) {\n  return value != null && typeof value.status === \"number\" && typeof value.statusText === \"string\" && typeof value.headers === \"object\" && typeof value.body !== \"undefined\";\n}\nfunction isRedirectResponse(result) {\n  if (!isResponse(result)) {\n    return false;\n  }\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\nfunction isValidMethod(method) {\n  return validRequestMethods.has(method.toLowerCase());\n}\nfunction isMutationMethod(method) {\n  return validMutationMethods.has(method.toLowerCase());\n}\nasync function resolveNavigationDeferredResults(matches, results, signal, currentMatches, currentLoaderData) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then(result => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveFetcherDeferredResults(matches, results, revalidatingFetchers) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let {\n      key,\n      routeId,\n      controller\n    } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find(m => (m == null ? void 0 : m.route.id) === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(controller, \"Expected an AbortController for revalidating fetcher deferred result\");\n      await resolveDeferredData(result, controller.signal, true).then(result => {\n        if (result) {\n          results[key] = result;\n        }\n      });\n    }\n  }\n}\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\nfunction getSubmissionFromNavigation(navigation) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    text,\n    formData,\n    json\n  } = navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined\n    };\n  }\n}\nfunction getLoadingNavigation(location, submission) {\n  if (submission) {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text\n    };\n    return navigation;\n  } else {\n    let navigation = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined\n    };\n    return navigation;\n  }\n}\nfunction getSubmittingNavigation(location, submission) {\n  let navigation = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text\n  };\n  return navigation;\n}\nfunction getLoadingFetcher(submission, data) {\n  if (submission) {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data\n    };\n    return fetcher;\n  } else {\n    let fetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data\n    };\n    return fetcher;\n  }\n}\nfunction getSubmittingFetcher(submission, existingFetcher) {\n  let fetcher = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined\n  };\n  return fetcher;\n}\nfunction getDoneFetcher(data) {\n  let fetcher = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data\n  };\n  return fetcher;\n}\nfunction restoreAppliedTransitions(_window, transitions) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\nfunction persistAppliedTransitions(_window, transitions) {\n  if (transitions.size > 0) {\n    let json = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json));\n    } catch (error) {\n      warning(false, \"Failed to save applied view transitions in sessionStorage (\" + error + \").\");\n    }\n  }\n}\n//#endregion\n\nexport { AbortedDeferredError, Action, IDLE_BLOCKER, IDLE_FETCHER, IDLE_NAVIGATION, UNSAFE_DEFERRED_SYMBOL, DeferredData as UNSAFE_DeferredData, ErrorResponseImpl as UNSAFE_ErrorResponseImpl, convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, decodePath as UNSAFE_decodePath, getResolveToMatches as UNSAFE_getResolveToMatches, invariant as UNSAFE_invariant, warning as UNSAFE_warning, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, createStaticHandler, data, defer, generatePath, getStaticContextFromError, getToPathname, isDataWithResponseInit, isDeferredData, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, redirectDocument, replace, resolvePath, resolveTo, stripBasename };","map":{"version":3,"sources":["../history.ts","../utils.ts","../router.ts"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","String","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","matchRoutesImpl","allowPartial","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","DataWithResponseInit","constructor","AbortedDeferredError","DeferredData","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","done","deferredKeys","pendingKeysSet","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscribers","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","dataStrategy","defaultDataStrategy","patchRoutesOnNavigationImpl","patchRoutesOnNavigation","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","v7_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","fogOfWar","checkFogOfWar","active","initialized","m","lazy","loader","errors","findIndex","shouldLoadRouteOnHydration","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","unblockBlockerHistoryUpdate","initialize","_ref","blockerKey","shouldBlockNavigation","currentLocation","nextHistoryUpdatePromise","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","viewTransitionOpts","flushSync","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","handleNavigational404","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","type","actionResult","handleAction","shortCircuited","routeId","isErrorResult","getLoadingNavigation","updatedMatches","handleLoaders","fetcherSubmission","getActionDataForCommit","isFogOfWar","getSubmittingNavigation","discoverResult","discoverRoutes","boundaryId","partialMatches","actionMatch","getTargetMatch","method","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","shouldUpdateNavigationState","getUpdatedActionData","matchesToLoad","revalidatingFetchers","getMatchesToLoad","cancelActiveDeferreds","updatedFetchers","markFetchRedirectsDone","updates","getUpdatedRevalidatingFetchers","rf","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","revalidatingFetcher","getLoadingFetcher","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","detectAndHandle405Error","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","isNavigation","redirectLocation","isDocumentReload","redirectHistoryAction","fetcherKey","dataResults","callDataStrategyImpl","isRedirectDataStrategyResultResult","normalizeRelativeRoutingRedirectResponse","convertDataStrategyResultToDataResult","fetchersToLoad","currentMatches","loaderResultsPromise","fetcherResultsPromise","all","resolveNavigationDeferredResults","resolveFetcherDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","fogMatches","isNonHMR","localManifest","patch","patchRoutesImpl","newMatches","newPartialMatches","_internalSetRoutes","newRoutes","patchRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","find","values","routeMatch","submit","loadRouteData","isDataStrategyResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","nakedIndex","hasNakedIndexQuery","URLSearchParams","indexValues","getAll","append","qs","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","includeBoundary","skipActionErrorRevalidation","currentUrl","nextUrl","boundaryMatches","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","hasData","hasError","hydrate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","childrenToPatch","uniqueChildren","newRoute","existingRoute","isSameRoute","aChild","bChild","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","shouldLoad","loadRouteDefinitionsPromises","dsMatches","loadRoutePromise","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","dataStrategyResult","contentType","isDataWithResponseInit","isDeferredData","deferred","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","errorMessage","isRevalidatingLoader","unwrap","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => DataFunctionReturnValue\n  ) => Promise<DataStrategyResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n  fetcherKey: string | null;\n}\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface DataStrategyResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData, DataWithResponseInit\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<Record<string, DataStrategyResult>>;\n}\n\nexport type AgnosticPatchRoutesOnNavigationFunctionArgs<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = {\n  path: string;\n  matches: M[];\n  patch: (routeId: string | null, children: O[]) => void;\n};\n\nexport type AgnosticPatchRoutesOnNavigationFunction<\n  O extends AgnosticRouteObject = AgnosticRouteObject,\n  M extends AgnosticRouteMatch = AgnosticRouteMatch\n> = (\n  opts: AgnosticPatchRoutesOnNavigationFunctionArgs<O, M>\n) => void | Promise<void>;\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: string[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, String(index)];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  return matchRoutesImpl(routes, locationArg, basename, false);\n}\n\nexport function matchRoutesImpl<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename: string,\n  allowPartial: boolean\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      decoded,\n      allowPartial\n    );\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string,\n  allowPartial = false\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    let route = meta.route;\n\n    if (\n      !match &&\n      end &&\n      allowPartial &&\n      !routesMeta[routesMeta.length - 1].route.index\n    ) {\n      match = matchPath(\n        {\n          path: meta.relativePath,\n          caseSensitive: meta.caseSensitive,\n          end: false,\n        },\n        remainingPathname\n      );\n    }\n\n    if (!match) {\n      return null;\n    }\n\n    Object.assign(matchedParams, match.params);\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nexport function decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === pathMatches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport class DataWithResponseInit<D> {\n  type: string = \"DataWithResponseInit\";\n  data: D;\n  init: ResponseInit | null;\n\n  constructor(data: D, init?: ResponseInit) {\n    this.data = data;\n    this.init = init || null;\n  }\n}\n\n/**\n * Create \"responses\" that contain `status`/`headers` without forcing\n * serialization into an actual `Response` - used by Remix single fetch\n */\nexport function data<D>(data: D, init?: number | ResponseInit) {\n  return new DataWithResponseInit(\n    data,\n    typeof init === \"number\" ? { status: init } : init\n  );\n}\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\n/**\n * A redirect response that will perform a `history.replaceState` instead of a\n * `history.pushState` for client-side navigation redirects.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const replace: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Replace\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  DataStrategyResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n  AgnosticPatchRoutesOnNavigationFunction,\n  DataWithResponseInit,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  matchRoutesImpl,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE DO NOT USE\n   *\n   * Patch additional children routes into an existing parent route\n   * @param routeId The parent route id or a callback function accepting `patch`\n   *                to perform batch patching\n   * @param children The additional children routes\n   */\n  patchRoutes(routeId: string | null, children: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  v7_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  dataStrategy?: DataStrategyFunction;\n  patchRoutesOnNavigation?: AgnosticPatchRoutesOnNavigationFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      viewTransitionOpts?: ViewTransitionOpts;\n      flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * Route matches which may have been updated from fog of war discovery\n   */\n  matches?: RouterState[\"matches\"];\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.dataStrategy || defaultDataStrategy;\n  let patchRoutesOnNavigationImpl = init.patchRoutesOnNavigation;\n\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    v7_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null && !patchRoutesOnNavigationImpl) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // In SPA apps, if the user provided a patchRoutesOnNavigation implementation and\n  // our initial match is a splat route, clear them out so we run through lazy\n  // discovery on hydration in case there's a more accurate lazy route match.\n  // In SSR apps (with `hydrationData`), we expect that the server will send\n  // up the proper matched routes so we don't want to run lazy discovery on\n  // initial hydration and want to hydrate into the splat route.\n  if (initialMatches && !init.hydrationData) {\n    let fogOfWar = checkFogOfWar(\n      initialMatches,\n      dataRoutes,\n      init.history.location.pathname\n    );\n    if (fogOfWar.active) {\n      initialMatches = null;\n    }\n  }\n\n  let initialized: boolean;\n  if (!initialMatches) {\n    initialized = false;\n    initialMatches = [];\n\n    // If partial hydration and fog of war is enabled, we will be running\n    // `patchRoutesOnNavigation` during hydration so include any partial matches as\n    // the initial matches so we can properly render `HydrateFallback`'s\n    if (future.v7_partialHydration) {\n      let fogOfWar = checkFogOfWar(\n        null,\n        dataRoutes,\n        init.history.location.pathname\n      );\n      if (fogOfWar.active && fogOfWar.matches) {\n        initialMatches = fogOfWar.matches;\n      }\n    }\n  } else if (initialMatches.some((m) => m.route.lazy)) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!initialMatches.some((m) => m.route.loader)) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches\n        .slice(0, idx + 1)\n        .every((m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors));\n    } else {\n      initialized = initialMatches.every(\n        (m) => !shouldLoadRouteOnHydration(m.route, loaderData, errors)\n      );\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: Set<string> = new Set();\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Map of pending patchRoutesOnNavigation() promises (keyed by path/matches) so\n  // that we only kick them off once for a given combo\n  let pendingPatchRoutes = new Map<\n    string,\n    ReturnType<AgnosticPatchRoutesOnNavigationFunction>\n  >();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let unblockBlockerHistoryUpdate: (() => void) | undefined = undefined;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (unblockBlockerHistoryUpdate) {\n          unblockBlockerHistoryUpdate();\n          unblockBlockerHistoryUpdate = undefined;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          let nextHistoryUpdatePromise = new Promise<void>((resolve) => {\n            unblockBlockerHistoryUpdate = resolve;\n          });\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked, after the url\n              // restoration is also complete.  See:\n              // https://github.com/remix-run/react-router/issues/11613\n              nextHistoryUpdatePromise.then(() => init.history.go(delta));\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        viewTransitionOpts: opts.viewTransitionOpts,\n        flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    // Commit any in-flight routes at the end of the HMR revalidation \"navigation\"\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      {\n        overrideNavigation: state.navigation,\n        // Proxy through any rending view transition\n        enableViewTransition: pendingViewTransitionEnabled === true,\n      }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, location.pathname);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let { error, notFoundMatches, route } = handleNavigational404(\n        location.pathname\n      );\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial hydration will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        fogOfWar.active,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      // If we received a 404 from handleAction, it's because we couldn't lazily\n      // discover the destination route so we don't want to call loaders\n      if (actionResult.pendingActionResult) {\n        let [routeId, result] = actionResult.pendingActionResult;\n        if (\n          isErrorResult(result) &&\n          isRouteErrorResponse(result.error) &&\n          result.error.status === 404\n        ) {\n          pendingNavigationController = null;\n\n          completeNavigation(location, {\n            matches: actionResult.matches,\n            loaderData: {},\n            errors: {\n              [routeId]: result.error,\n            },\n          });\n          return;\n        }\n      }\n\n      matches = actionResult.matches || matches;\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n      // No need to do fog of war matching again on loader execution\n      fogOfWar.active = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let {\n      shortCircuited,\n      matches: updatedMatches,\n      loaderData,\n      errors,\n    } = await handleLoaders(\n      request,\n      location,\n      matches,\n      fogOfWar.active,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches: updatedMatches || matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          pendingActionResult: [\n            boundaryId,\n            {\n              type: ResultType.error,\n              error: discoverResult.error,\n            },\n          ],\n        };\n      } else if (!discoverResult.matches) {\n        let { notFoundMatches, error, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          pendingActionResult: [\n            route.id,\n            {\n              type: ResultType.error,\n              error,\n            },\n          ],\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        state,\n        request,\n        [actionMatch],\n        matches,\n        null\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, true, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions to the current location are REPLACE\n      // navigations, but if the action threw an error that'll be rendered in\n      // an errorElement, we fall back to PUSH so that the user can use the\n      // back button to get back to the pre-submission form location to try\n      // again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        matches,\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      matches,\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    let shouldUpdateNavigationState =\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration);\n\n    // When fog of war is enabled, we enter our `loading` state earlier so we\n    // can discover new routes during the `loading` state.  We skip this if\n    // we've already run actions since we would have done our matching already.\n    // If the children() function threw then, we want to proceed with the\n    // partial matches it discovered.\n    if (isFogOfWar) {\n      if (shouldUpdateNavigationState) {\n        let actionData = getUpdatedActionData(pendingActionResult);\n        updateState(\n          {\n            navigation: loadingNavigation,\n            ...(actionData !== undefined ? { actionData } : {}),\n          },\n          {\n            flushSync,\n          }\n        );\n      }\n\n      let discoverResult = await discoverRoutes(\n        matches,\n        location.pathname,\n        request.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return { shortCircuited: true };\n      } else if (discoverResult.type === \"error\") {\n        let boundaryId = findNearestBoundary(discoverResult.partialMatches)\n          .route.id;\n        return {\n          matches: discoverResult.partialMatches,\n          loaderData: {},\n          errors: {\n            [boundaryId]: discoverResult.error,\n          },\n        };\n      } else if (!discoverResult.matches) {\n        let { error, notFoundMatches, route } = handleNavigational404(\n          location.pathname\n        );\n        return {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        };\n      } else {\n        matches = discoverResult.matches;\n      }\n    }\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    if (shouldUpdateNavigationState) {\n      let updates: Partial<RouterState> = {};\n      if (!isFogOfWar) {\n        // Only update navigation/actionNData if we didn't already do it above\n        updates.navigation = loadingNavigation;\n        let actionData = getUpdatedActionData(pendingActionResult);\n        if (actionData !== undefined) {\n          updates.actionData = actionData;\n        }\n      }\n      if (revalidatingFetchers.length > 0) {\n        updates.fetchers = getUpdatedRevalidatingFetchers(revalidatingFetchers);\n      }\n      updateState(updates, { flushSync });\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      abortFetcher(rf.key);\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      await startRedirectNavigation(request, redirect.result, true, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // Preserve SSR errors during partial hydration\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      errors = { ...state.errors, ...errors };\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      matches,\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  function getUpdatedActionData(\n    pendingActionResult: PendingActionResult | undefined\n  ): Record<string, RouteData> | null | undefined {\n    if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n      // This is cast to `any` currently because `RouteData`uses any and it\n      // would be a breaking change to use any.\n      // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n      return {\n        [pendingActionResult[0]]: pendingActionResult[1].data as any,\n      };\n    } else if (state.actionData) {\n      if (Object.keys(state.actionData).length === 0) {\n        return null;\n      } else {\n        return state.actionData;\n      }\n    }\n  }\n\n  function getUpdatedRevalidatingFetchers(\n    revalidatingFetchers: RevalidatingFetcher[]\n  ) {\n    revalidatingFetchers.forEach((rf) => {\n      let fetcher = state.fetchers.get(rf.key);\n      let revalidatingFetcher = getLoadingFetcher(\n        undefined,\n        fetcher ? fetcher.data : undefined\n      );\n      state.fetchers.set(rf.key, revalidatingFetcher);\n    });\n    return new Map(state.fetchers);\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    abortFetcher(key);\n\n    let flushSync = (opts && opts.flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    let fogOfWar = checkFogOfWar(matches, routesToUse, normalizedPath);\n    if (fogOfWar.active && fogOfWar.matches) {\n      matches = fogOfWar.matches;\n    }\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    let preventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        fogOfWar.active,\n        flushSync,\n        preventScrollReset,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      fogOfWar.active,\n      flushSync,\n      preventScrollReset,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    function detectAndHandle405Error(m: AgnosticDataRouteMatch) {\n      if (!m.route.action && !m.route.lazy) {\n        let error = getInternalRouterError(405, {\n          method: submission.formMethod,\n          pathname: path,\n          routeId: routeId,\n        });\n        setFetcherError(key, routeId, error, { flushSync });\n        return true;\n      }\n      return false;\n    }\n\n    if (!isFogOfWar && detectAndHandle405Error(match)) {\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        requestMatches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        requestMatches = discoverResult.matches;\n        match = getTargetMatch(requestMatches, path);\n\n        if (detectAndHandle405Error(match)) {\n          return;\n        }\n      }\n    }\n\n    // Call the action for the fetcher\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      state,\n      fetchRequest,\n      [match],\n      requestMatches,\n      key\n    );\n    let actionResult = actionResults[match.route.id];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, false, {\n            fetcherSubmission: submission,\n            preventScrollReset,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.v7_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        abortFetcher(staleKey);\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect(loaderResults);\n    if (redirect) {\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    redirect = findRedirect(fetcherResults);\n    if (redirect) {\n      // If this redirect came from a fetcher make sure we mark it in\n      // fetchRedirectIds so it doesn't get revalidated on the next set of\n      // loader executions\n      fetchRedirectIds.add(redirect.key);\n      return startRedirectNavigation(\n        revalidationRequest,\n        redirect.result,\n        false,\n        { preventScrollReset }\n      );\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    isFogOfWar: boolean,\n    flushSync: boolean,\n    preventScrollReset: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n\n    if (isFogOfWar) {\n      let discoverResult = await discoverRoutes(\n        matches,\n        path,\n        fetchRequest.signal\n      );\n\n      if (discoverResult.type === \"aborted\") {\n        return;\n      } else if (discoverResult.type === \"error\") {\n        setFetcherError(key, routeId, discoverResult.error, { flushSync });\n        return;\n      } else if (!discoverResult.matches) {\n        setFetcherError(\n          key,\n          routeId,\n          getInternalRouterError(404, { pathname: path }),\n          { flushSync }\n        );\n        return;\n      } else {\n        matches = discoverResult.matches;\n        match = getTargetMatch(matches, path);\n      }\n    }\n\n    // Call the loader for this fetcher route match\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      state,\n      fetchRequest,\n      [match],\n      matches,\n      key\n    );\n    let result = results[match.route.id];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result, false, {\n          preventScrollReset,\n        });\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    isNavigation: boolean,\n    {\n      submission,\n      fetcherSubmission,\n      preventScrollReset,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true || redirect.response.headers.has(\"X-Remix-Replace\")\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve these flags across redirects\n        preventScrollReset: preventScrollReset || pendingPreventScrollReset,\n        enableViewTransition: isNavigation\n          ? pendingViewTransitionEnabled\n          : undefined,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    state: RouterState,\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    fetcherKey: string | null\n  ): Promise<Record<string, DataResult>> {\n    let results: Record<string, DataStrategyResult>;\n    let dataResults: Record<string, DataResult> = {};\n    try {\n      results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        state,\n        request,\n        matchesToLoad,\n        matches,\n        fetcherKey,\n        manifest,\n        mapRouteProperties\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      matchesToLoad.forEach((m) => {\n        dataResults[m.route.id] = {\n          type: ResultType.error,\n          error: e,\n        };\n      });\n      return dataResults;\n    }\n\n    for (let [routeId, result] of Object.entries(results)) {\n      if (isRedirectDataStrategyResultResult(result)) {\n        let response = result.result as Response;\n        dataResults[routeId] = {\n          type: ResultType.redirect,\n          response: normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            routeId,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          ),\n        };\n      } else {\n        dataResults[routeId] = await convertDataStrategyResultToDataResult(\n          result\n        );\n      }\n    }\n\n    return dataResults;\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    state: RouterState,\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let currentMatches = state.matches;\n\n    // Kick off loaders and fetchers in parallel\n    let loaderResultsPromise = callDataStrategy(\n      \"loader\",\n      state,\n      request,\n      matchesToLoad,\n      matches,\n      null\n    );\n\n    let fetcherResultsPromise = Promise.all(\n      fetchersToLoad.map(async (f) => {\n        if (f.matches && f.match && f.controller) {\n          let results = await callDataStrategy(\n            \"loader\",\n            state,\n            createClientSideRequest(init.history, f.path, f.controller.signal),\n            [f.match],\n            f.matches,\n            f.key\n          );\n          let result = results[f.match.route.id];\n          // Fetcher results are keyed by fetcher key from here on out, not routeId\n          return { [f.key]: result };\n        } else {\n          return Promise.resolve({\n            [f.key]: {\n              type: ResultType.error,\n              error: getInternalRouterError(404, {\n                pathname: f.path,\n              }),\n            } as ErrorResult,\n          });\n        }\n      })\n    );\n\n    let loaderResults = await loaderResultsPromise;\n    let fetcherResults = (await fetcherResultsPromise).reduce(\n      (acc, r) => Object.assign(acc, r),\n      {}\n    );\n\n    await Promise.all([\n      resolveNavigationDeferredResults(\n        matches,\n        loaderResults,\n        request.signal,\n        currentMatches,\n        state.loaderData\n      ),\n      resolveFetcherDeferredResults(matches, fetcherResults, fetchersToLoad),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.add(key);\n      }\n      abortFetcher(key);\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    cancelledFetcherLoads.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    if (controller) {\n      controller.abort();\n      fetchControllers.delete(key);\n    }\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function handleNavigational404(pathname: string) {\n    let error = getInternalRouterError(404, { pathname });\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let { matches, route } = getShortCircuitMatches(routesToUse);\n\n    // Cancel all pending deferred on 404s since we don't keep any routes\n    cancelActiveDeferreds();\n\n    return { notFoundMatches: matches, route, error };\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function checkFogOfWar(\n    matches: AgnosticDataRouteMatch[] | null,\n    routesToUse: AgnosticDataRouteObject[],\n    pathname: string\n  ): { active: boolean; matches: AgnosticDataRouteMatch[] | null } {\n    if (patchRoutesOnNavigationImpl) {\n      if (!matches) {\n        let fogMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n          routesToUse,\n          pathname,\n          basename,\n          true\n        );\n\n        return { active: true, matches: fogMatches || [] };\n      } else {\n        if (Object.keys(matches[0].params).length > 0) {\n          // If we matched a dynamic param or a splat, it might only be because\n          // we haven't yet discovered other routes that would match with a\n          // higher score.  Call patchRoutesOnNavigation just to be sure\n          let partialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n            routesToUse,\n            pathname,\n            basename,\n            true\n          );\n          return { active: true, matches: partialMatches };\n        }\n      }\n    }\n\n    return { active: false, matches: null };\n  }\n\n  type DiscoverRoutesSuccessResult = {\n    type: \"success\";\n    matches: AgnosticDataRouteMatch[] | null;\n  };\n  type DiscoverRoutesErrorResult = {\n    type: \"error\";\n    error: any;\n    partialMatches: AgnosticDataRouteMatch[];\n  };\n  type DiscoverRoutesAbortedResult = { type: \"aborted\" };\n  type DiscoverRoutesResult =\n    | DiscoverRoutesSuccessResult\n    | DiscoverRoutesErrorResult\n    | DiscoverRoutesAbortedResult;\n\n  async function discoverRoutes(\n    matches: AgnosticDataRouteMatch[],\n    pathname: string,\n    signal: AbortSignal\n  ): Promise<DiscoverRoutesResult> {\n    if (!patchRoutesOnNavigationImpl) {\n      return { type: \"success\", matches };\n    }\n\n    let partialMatches: AgnosticDataRouteMatch[] | null = matches;\n    while (true) {\n      let isNonHMR = inFlightDataRoutes == null;\n      let routesToUse = inFlightDataRoutes || dataRoutes;\n      let localManifest = manifest;\n      try {\n        await patchRoutesOnNavigationImpl({\n          path: pathname,\n          matches: partialMatches,\n          patch: (routeId, children) => {\n            if (signal.aborted) return;\n            patchRoutesImpl(\n              routeId,\n              children,\n              routesToUse,\n              localManifest,\n              mapRouteProperties\n            );\n          },\n        });\n      } catch (e) {\n        return { type: \"error\", error: e, partialMatches };\n      } finally {\n        // If we are not in the middle of an HMR revalidation and we changed the\n        // routes, provide a new identity so when we `updateState` at the end of\n        // this navigation/fetch `router.routes` will be a new identity and\n        // trigger a re-run of memoized `router.routes` dependencies.\n        // HMR will already update the identity and reflow when it lands\n        // `inFlightDataRoutes` in `completeNavigation`\n        if (isNonHMR && !signal.aborted) {\n          dataRoutes = [...dataRoutes];\n        }\n      }\n\n      if (signal.aborted) {\n        return { type: \"aborted\" };\n      }\n\n      let newMatches = matchRoutes(routesToUse, pathname, basename);\n      if (newMatches) {\n        return { type: \"success\", matches: newMatches };\n      }\n\n      let newPartialMatches = matchRoutesImpl<AgnosticDataRouteObject>(\n        routesToUse,\n        pathname,\n        basename,\n        true\n      );\n\n      // Avoid loops if the second pass results in the same partial matches\n      if (\n        !newPartialMatches ||\n        (partialMatches.length === newPartialMatches.length &&\n          partialMatches.every(\n            (m, i) => m.route.id === newPartialMatches![i].route.id\n          ))\n      ) {\n        return { type: \"success\", matches: null };\n      }\n\n      partialMatches = newPartialMatches;\n    }\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  function patchRoutes(\n    routeId: string | null,\n    children: AgnosticRouteObject[]\n  ): void {\n    let isNonHMR = inFlightDataRoutes == null;\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    patchRoutesImpl(\n      routeId,\n      children,\n      routesToUse,\n      manifest,\n      mapRouteProperties\n    );\n\n    // If we are not in the middle of an HMR revalidation and we changed the\n    // routes, provide a new identity and trigger a reflow via `updateState`\n    // to re-run memoized `router.routes` dependencies.\n    // HMR will already update the identity and reflow when it lands\n    // `inFlightDataRoutes` in `completeNavigation`\n    if (isNonHMR) {\n      dataRoutes = [...dataRoutes];\n      updateState({});\n    }\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    patchRoutes,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `DataStrategyResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isDataStrategyResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        dataStrategy\n      );\n      result = results[actionMatch.route.id];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    dataStrategy: DataStrategyFunction | null\n  ): Promise<Record<string, DataResult>> {\n    let results = await callDataStrategyImpl(\n      dataStrategy || defaultDataStrategy,\n      type,\n      null,\n      request,\n      matchesToLoad,\n      matches,\n      null,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    let dataResults: Record<string, DataResult> = {};\n    await Promise.all(\n      matches.map(async (match) => {\n        if (!(match.route.id in results)) {\n          return;\n        }\n        let result = results[match.route.id];\n        if (isRedirectDataStrategyResultResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            match.route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        dataResults[match.route.id] =\n          await convertDataStrategyResultToDataResult(result);\n      })\n    );\n    return dataResults;\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Account for `?index` params when routing to the current location\n  if ((to == null || to === \"\" || to === \".\") && activeRouteMatch) {\n    let nakedIndex = hasNakedIndexQuery(path.search);\n    if (activeRouteMatch.route.index && !nakedIndex) {\n      // Add one when we're targeting an index route\n      path.search = path.search\n        ? path.search.replace(/^\\?/, \"?index&\")\n        : \"?index\";\n    } else if (!activeRouteMatch.route.index && nakedIndex) {\n      // Remove existing ones when we're not\n      let params = new URLSearchParams(path.search);\n      let indexValues = params.getAll(\"index\");\n      params.delete(\"index\");\n      indexValues.filter((v) => v).forEach((v) => params.append(\"index\", v));\n      let qs = params.toString();\n      path.search = qs ? `?${qs}` : \"\";\n    }\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes at/below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string,\n  includeBoundary = false\n) {\n  let index = matches.findIndex((m) => m.route.id === boundaryId);\n  if (index >= 0) {\n    return matches.slice(0, includeBoundary ? index + 1 : index);\n  }\n  return matches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  initialHydration: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: Set<string>,\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryMatches = matches;\n  if (initialHydration && state.errors) {\n    // On initial hydration, only consider matches up to _and including_ the boundary.\n    // This is inclusive to handle cases where a server loader ran successfully,\n    // a child server loader bubbled up to this route, but this route has\n    // `clientLoader.hydrate` so we want to still run the `clientLoader` so that\n    // we have a complete version of `loaderData`\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      Object.keys(state.errors)[0],\n      true\n    );\n  } else if (pendingActionResult && isErrorResult(pendingActionResult[1])) {\n    // If an action threw an error, we call loaders up to, but not including the\n    // boundary\n    boundaryMatches = getLoaderMatchesUntilBoundary(\n      matches,\n      pendingActionResult[0]\n    );\n  }\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (initialHydration) {\n      return shouldLoadRouteOnHydration(route, state.loaderData, state.errors);\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial hydration (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      initialHydration ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.has(key)) {\n      // Always mark for revalidation if the fetcher was cancelled\n      cancelledFetcherLoads.delete(key);\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction shouldLoadRouteOnHydration(\n  route: AgnosticDataRouteObject,\n  loaderData: RouteData | null | undefined,\n  errors: RouteData | null | undefined\n) {\n  // We dunno if we have a loader - gotta find out!\n  if (route.lazy) {\n    return true;\n  }\n\n  // No loader, nothing to initialize\n  if (!route.loader) {\n    return false;\n  }\n\n  let hasData = loaderData != null && loaderData[route.id] !== undefined;\n  let hasError = errors != null && errors[route.id] !== undefined;\n\n  // Don't run if we error'd during SSR\n  if (!hasData && hasError) {\n    return false;\n  }\n\n  // Explicitly opting-in to running on hydration\n  if (typeof route.loader === \"function\" && route.loader.hydrate === true) {\n    return true;\n  }\n\n  // Otherwise, run if we're not yet initialized with anything\n  return !hasData && !hasError;\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\nfunction patchRoutesImpl(\n  routeId: string | null,\n  children: AgnosticRouteObject[],\n  routesToUse: AgnosticDataRouteObject[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction\n) {\n  let childrenToPatch: AgnosticDataRouteObject[];\n  if (routeId) {\n    let route = manifest[routeId];\n    invariant(\n      route,\n      `No route found to patch children into: routeId = ${routeId}`\n    );\n    if (!route.children) {\n      route.children = [];\n    }\n    childrenToPatch = route.children;\n  } else {\n    childrenToPatch = routesToUse;\n  }\n\n  // Don't patch in routes we already know about so that `patch` is idempotent\n  // to simplify user-land code. This is useful because we re-call the\n  // `patchRoutesOnNavigation` function for matched routes with params.\n  let uniqueChildren = children.filter(\n    (newRoute) =>\n      !childrenToPatch.some((existingRoute) =>\n        isSameRoute(newRoute, existingRoute)\n      )\n  );\n\n  let newRoutes = convertRoutesToDataRoutes(\n    uniqueChildren,\n    mapRouteProperties,\n    [routeId || \"_\", \"patch\", String(childrenToPatch?.length || \"0\")],\n    manifest\n  );\n\n  childrenToPatch.push(...newRoutes);\n}\n\nfunction isSameRoute(\n  newRoute: AgnosticRouteObject,\n  existingRoute: AgnosticRouteObject\n): boolean {\n  // Most optimal check is by id\n  if (\n    \"id\" in newRoute &&\n    \"id\" in existingRoute &&\n    newRoute.id === existingRoute.id\n  ) {\n    return true;\n  }\n\n  // Second is by pathing differences\n  if (\n    !(\n      newRoute.index === existingRoute.index &&\n      newRoute.path === existingRoute.path &&\n      newRoute.caseSensitive === existingRoute.caseSensitive\n    )\n  ) {\n    return false;\n  }\n\n  // Pathless layout routes are trickier since we need to check children.\n  // If they have no children then they're the same as far as we can tell\n  if (\n    (!newRoute.children || newRoute.children.length === 0) &&\n    (!existingRoute.children || existingRoute.children.length === 0)\n  ) {\n    return true;\n  }\n\n  // Otherwise, we look to see if every child in the new route is already\n  // represented in the existing route's children\n  return newRoute.children!.every((aChild, i) =>\n    existingRoute.children?.some((bChild) => isSameRoute(aChild, bChild))\n  );\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nasync function defaultDataStrategy({\n  matches,\n}: DataStrategyFunctionArgs): ReturnType<DataStrategyFunction> {\n  let matchesToLoad = matches.filter((m) => m.shouldLoad);\n  let results = await Promise.all(matchesToLoad.map((m) => m.resolve()));\n  return results.reduce(\n    (acc, result, i) =>\n      Object.assign(acc, { [matchesToLoad[i].route.id]: result }),\n    {}\n  );\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  state: RouterState | null,\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  fetcherKey: string | null,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<Record<string, DataStrategyResult>> {\n  let loadRouteDefinitionsPromises = matches.map((m) =>\n    m.route.lazy\n      ? loadLazyRouteModule(m.route, mapRouteProperties, manifest)\n      : undefined\n  );\n\n  let dsMatches = matches.map((match, i) => {\n    let loadRoutePromise = loadRouteDefinitionsPromises[i];\n    let shouldLoad = matchesToLoad.some((m) => m.route.id === match.route.id);\n    // `resolve` encapsulates route.lazy(), executing the loader/action,\n    // and mapping return values/thrown errors to a `DataStrategyResult`.  Users\n    // can pass a callback to take fine-grained control over the execution\n    // of the loader/action\n    let resolve: DataStrategyMatch[\"resolve\"] = async (handlerOverride) => {\n      if (\n        handlerOverride &&\n        request.method === \"GET\" &&\n        (match.route.lazy || match.route.loader)\n      ) {\n        shouldLoad = true;\n      }\n      return shouldLoad\n        ? callLoaderOrAction(\n            type,\n            request,\n            match,\n            loadRoutePromise,\n            handlerOverride,\n            requestContext\n          )\n        : Promise.resolve({ type: ResultType.data, result: undefined });\n    };\n\n    return {\n      ...match,\n      shouldLoad,\n      resolve,\n    };\n  });\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: dsMatches,\n    request,\n    params: matches[0].params,\n    fetcherKey,\n    context: requestContext,\n  });\n\n  // Wait for all routes to load here but 'swallow the error since we want\n  // it to bubble up from the `await loadRoutePromise` in `callLoaderOrAction` -\n  // called from `match.resolve()`\n  try {\n    await Promise.all(loadRouteDefinitionsPromises);\n  } catch (e) {\n    // No-op\n  }\n\n  return results;\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  loadRoutePromise: Promise<void> | undefined,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<DataStrategyResult> {\n  let result: DataStrategyResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<DataStrategyResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<DataStrategyResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<DataStrategyResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<DataStrategyResult> = (async () => {\n      try {\n        let val = await (handlerOverride\n          ? handlerOverride((ctx: unknown) => actualHandler(ctx))\n          : actualHandler());\n        return { type: \"data\", result: val };\n      } catch (e) {\n        return { type: \"error\", result: e };\n      }\n    })();\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    // If we have a route.lazy promise, await that first\n    if (loadRoutePromise) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadRoutePromise,\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadRoutePromise;\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // DataStrategyResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertDataStrategyResultToDataResult(\n  dataStrategyResult: DataStrategyResult\n): Promise<DataResult> {\n  let { result, type } = dataStrategyResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    if (isDataWithResponseInit(result)) {\n      if (result.data instanceof Error) {\n        return {\n          type: ResultType.error,\n          error: result.data,\n          statusCode: result.init?.status,\n        };\n      }\n\n      // Convert thrown data() to ErrorResponse instances\n      result = new ErrorResponseImpl(\n        result.init?.status || 500,\n        undefined,\n        result.data\n      );\n    }\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : undefined,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  if (isDataWithResponseInit(result)) {\n    return {\n      type: ResultType.data,\n      data: result.data,\n      statusCode: result.init?.status,\n      headers: result.init?.headers\n        ? new Headers(result.init.headers)\n        : undefined,\n    };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  matches.forEach((match) => {\n    if (!(match.route.id in results)) {\n      return;\n    }\n    let id = match.route.id;\n    let result = results[id];\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  results: Record<string, DataResult>,\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: Record<string, DataResult>,\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach((rf) => {\n    let { key, match, controller } = rf;\n    let result = fetcherResults[key];\n    invariant(result, \"Did not find corresponding fetcher result\");\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      return;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n    message,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n    message?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: Record<string, DataResult>\n): { key: string; result: RedirectResult } | undefined {\n  let entries = Object.entries(results);\n  for (let i = entries.length - 1; i >= 0; i--) {\n    let [key, result] = entries[i];\n    if (isRedirectResult(result)) {\n      return { key, result };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isPromise<T = unknown>(val: unknown): val is Promise<T> {\n  return typeof val === \"object\" && val != null && \"then\" in val;\n}\n\nfunction isDataStrategyResult(result: unknown): result is DataStrategyResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectDataStrategyResultResult(result: DataStrategyResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDataWithResponseInit(\n  value: any\n): value is DataWithResponseInit<unknown> {\n  return (\n    typeof value === \"object\" &&\n    value != null &&\n    \"type\" in value &&\n    \"data\" in value &&\n    \"init\" in value &&\n    value.type === \"DataWithResponseInit\"\n  );\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveNavigationDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  signal: AbortSignal,\n  currentMatches: AgnosticDataRouteMatch[],\n  currentLoaderData: RouteData\n) {\n  let entries = Object.entries(results);\n  for (let index = 0; index < entries.length; index++) {\n    let [routeId, result] = entries[index];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && isRevalidatingLoader) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, false).then((result) => {\n        if (result) {\n          results[routeId] = result;\n        }\n      });\n    }\n  }\n}\n\nasync function resolveFetcherDeferredResults(\n  matches: (AgnosticDataRouteMatch | null)[],\n  results: Record<string, DataResult>,\n  revalidatingFetchers: RevalidatingFetcher[]\n) {\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, routeId, controller } = revalidatingFetchers[index];\n    let result = results[key];\n    let match = matches.find((m) => m?.route.id === routeId);\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    if (isDeferredResult(result)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      invariant(\n        controller,\n        \"Expected an AbortController for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, controller.signal, true).then(\n        (result) => {\n          if (result) {\n            results[key] = result;\n          }\n        }\n      );\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}