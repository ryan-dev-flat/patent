{"ast":null,"code":"var _jsxFileName = \"/home/coapr/development/projects/patent/client/src/context/UserContext.js\";\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode'; // Import JWT decode library\n\nexport const UserContext = createContext();\nexport const UserProvider = ({\n  children\n}) => {\n  const [user, setUser] = useState(null);\n  useEffect(() => {\n    // Check if token exists in localStorage and decode it\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedUser = jwtDecode(token);\n        setUser(decodedUser);\n      } catch (error) {\n        console.error('Invalid token:', error);\n        localStorage.removeItem('token');\n      }\n    }\n  }, []);\n  const login = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('token', token);\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n  };\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"names":["React","createContext","useState","useEffect","jwtDecode","UserContext","UserProvider","children","user","setUser","token","localStorage","getItem","decodedUser","error","console","removeItem","login","userData","setItem","logout","createElement","Provider","value","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/home/coapr/development/projects/patent/client/src/context/UserContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport { jwtDecode } from 'jwt-decode';  // Import JWT decode library\n\nexport const UserContext = createContext();\n\nexport const UserProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    // Check if token exists in localStorage and decode it\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const decodedUser = jwtDecode(token);\n        setUser(decodedUser);\n      } catch (error) {\n        console.error('Invalid token:', error);\n        localStorage.removeItem('token');\n      }\n    }\n  }, []);\n\n  const login = (userData, token) => {\n    setUser(userData);\n    localStorage.setItem('token', token);\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('token');\n  };\n\n  return (\n    <UserContext.Provider value={{ user, login, logout }}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,SAASC,SAAS,QAAQ,YAAY,CAAC,CAAE;;AAEzC,OAAO,MAAMC,WAAW,GAAGJ,aAAa,CAAC,CAAC;AAE1C,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACd;IACA,MAAMO,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACT,IAAI;QACF,MAAMG,WAAW,GAAGT,SAAS,CAACM,KAAK,CAAC;QACpCD,OAAO,CAACI,WAAW,CAAC;MACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;QACtCH,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;MAClC;IACF;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAER,KAAK,KAAK;IACjCD,OAAO,CAACS,QAAQ,CAAC;IACjBP,YAAY,CAACQ,OAAO,CAAC,OAAO,EAAET,KAAK,CAAC;EACtC,CAAC;EAED,MAAMU,MAAM,GAAGA,CAAA,KAAM;IACnBX,OAAO,CAAC,IAAI,CAAC;IACbE,YAAY,CAACK,UAAU,CAAC,OAAO,CAAC;EAClC,CAAC;EAED,oBACEhB,KAAA,CAAAqB,aAAA,CAAChB,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEf,IAAI;MAAES,KAAK;MAAEG;IAAO,CAAE;IAAAI,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClDtB,QACmB,CAAC;AAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}